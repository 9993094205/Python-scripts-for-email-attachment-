import imaplib
import email
import os
from email.header import decode_header

# Function to create folder if it doesn't exist
def create_folder(folder_path):
    if not os.path.isdir(folder_path):
        os.makedirs(folder_path)

# Function to clean and create safe filename
def clean_filename(filename):
    return "".join(c if c.isalnum() else "_" for c in filename)

# Function to save attachments with new name
def save_attachments(msg, folder_path, new_name):
    for part in msg.walk():
        if part.get_content_maintype() == 'multipart':
            continue
        if part.get('Content-Disposition') is None:
            continue
        filename = part.get_filename()
        if filename:
            # Decode filename if necessary
            filename = decode_header(filename)[0][0]
            if isinstance(filename, bytes):
                filename = filename.decode()
            filename = clean_filename(filename)

            # Save the file with new name
            new_filepath = os.path.join(folder_path, new_name + os.path.splitext(filename)[1])
            with open(new_filepath, 'wb') as f:
                f.write(part.get_payload(decode=True))
            print(f"Attachment saved as: {new_filepath}")

# Connect to your email account
def download_attachments(username, password, folder_path, new_name):
    # Create folder if it doesn't exist
    create_folder(folder_path)

    # Connect to the email server
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(username, password)

    # Select the mailbox you want to check
    mail.select("inbox")

    # Search for all emails with attachments
    status, messages = mail.search(None, '(HASATTACHMENT)')

    # Fetch emails and save attachments
    for num in messages[0].split():
        status, msg_data = mail.fetch(num, '(RFC822)')
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                save_attachments(msg, folder_path, new_name)

    # Logout from the email account
    mail.logout()

# Example usage
username = "your_email@gmail.com"
password = "your_password"
folder_path = "/path/to/save/attachments"  # Replace with your desired folder
new_name = "new_attachment_name"           # Provide the new name for the attachment

download_attachments(username, password, folder_path, new_name)

new code for testing

import os
import re
import win32com.client

def download_attachments(save_folder: str):
    # Connect to Outlook
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 represents the inbox folder

    # Define regex pattern for subject line (File_DD/MM/YYYY)
    subject_pattern = r"^File_\d{2}/\d{2}/\d{4}$"

    # Search for today's email
    messages = inbox.Items
    message = None
    for msg in messages:
        if re.match(subject_pattern, msg.Subject):
            message = msg
            break

    # Process attachments if email with the subject is found
    if message is not None and message.Attachments.Count >= 2:
        # Ensure save folder exists
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Save and rename attachments
        attachment_names = ["File 1.pdf", "File 2.pdf"]  # Desired file names
        for i, attachment in enumerate(message.Attachments[:2]):  # Process the first two attachments
            file_path = os.path.join(save_folder, attachment_names[i])
            attachment.SaveAsFile(file_path)
            print(f"Attachment saved as: {file_path}")
    else:
        print("Email with specified subject not found or less than 2 attachments available.")

# Usage
save_folder = r"C:\XYZ"
download_attachments(save_folder)









import os
import re
import win32com.client
from datetime import datetime

def save_email(save_folder: str):
    # Connect to Outlook
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 represents the inbox folder

    # Defining the folder structure
    subfolder_name = "Ask Compass"
    sub_subfolder_name = "Forward Meeting Dashboard"

    try:
        # Access each level of nested folder
        subfolder = inbox.Folders[subfolder_name]
        target_folder = subfolder.Folders[sub_subfolder_name]
        print(f"Successfully accessed folder: {target_folder.Name}")
    except Exception as e:
        print(f"Error accessing folders: {e}")
        return

    # Define regex pattern for subject line (File_DD/MM/YYYY)
    today_date = datetime.now().strftime("%d %B")  # Format: DD month
    subject_pattern = rf"CalendarMeeting as of {today_date}"
    print(f"Expected Subject Pattern: {subject_pattern}")

    # Search for today's email
    messages = target_folder.Items
    message = None
    for msg in messages:
        print(f"Checking subject: {msg.Subject}")  # Print each subject for debugging
        if re.match(subject_pattern, msg.Subject):
            message = msg
            break

    # Save the email if it is found
    if message is not None:
        print(f"Email found with subject: {message.Subject}")

        # Ensure save folder exists
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Construct file path and save as .msg
        file_path = os.path.join(save_folder, f"{message.Subject}.msg")
        try:
            message.SaveAs(file_path)
            print(f"Email saved as: {file_path}")
        except Exception as e:
            print(f"Error saving email: {e}")
    else:
        print("Email with specified subject not found or does not meet criteria.")
        print("Debug Information:")
        print(f"Target Folder: {target_folder}")
        print(f"Expected Subject Pattern: {subject_pattern}")

# Usage



save_folder = "C:/save files folder"  # Update this path as needed
save_email(save_folder)







import os
from datetime import datetime

def rename_files(folder_path: str):
    # Get today's date formatted as "DD Month" (e.g., "06 November")
    today_date = datetime.now().strftime("%d %B")

    # Define the dynamic old file names based on today's date
    old_name_x1 = f"CalendarMeeting {today_date}.xlsx"
    old_name_x2 = f"CalendarMeeting FICC {today_date}.xlsx"

    # Define the new file names
    new_name_y1 = "y1.xlsx"
    new_name_y2 = "y2.xlsx"

    # Map old names to new names
    rename_map = {old_name_x1: new_name_y1, old_name_x2: new_name_y2}

    # Loop through files in the folder and rename if they exist
    for old_name, new_name in rename_map.items():
        old_path = os.path.join(folder_path, old_name)
        new_path = os.path.join(folder_path, new_name)

        if os.path.exists(old_path):
            os.rename(old_path, new_path)
            print(f"Renamed '{old_name}' to '{new_name}'")
        else:
            print(f"'{old_name}' not found in folder.")

# Usage
folder_path = "C:/path/to/your/folder"  # Update this to your folder path
rename_files(folder_path)

import requests

# URL of the file you want to download
url = "https://example.com/path/to/file"

# Specify the local path where the file will be saved
file_path = "downloaded_file.ext"

try:
    # Send a GET request to the URL
    response = requests.get(url, stream=True)
    response.raise_for_status()  # Check if the request was successful

    # Open a file in write-binary mode and save the content in chunks
    with open(file_path, "wb") as file:
        for chunk in response.iter_content(chunk_size=8192):
            file.write(chunk)
    print(f"File downloaded successfully and saved as {file_path}")

except requests.exceptions.RequestException as e:
    print("Error downloading the file:", e)







    

import imaplib
import email
from bs4 import BeautifulSoup
import requests
import os

# Email account credentials
EMAIL = "your_email@example.com"
PASSWORD = "your_password"
IMAP_SERVER = "imap.gmail.com"  # Change based on your email provider

# Folder to save the downloaded file
SAVE_FOLDER = r"C:\path\to\save\folder"

def download_attachment_from_email():
    try:
        # Connect to the IMAP server and log in
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, PASSWORD)
        mail.select("inbox")  # Select inbox or any specific folder

        # Search for unread emails with specific criteria (you can customize)
        status, messages = mail.search(None, '(UNSEEN SUBJECT "Your Daily Report")')
        mail_ids = messages[0].split()

        for mail_id in mail_ids:
            # Fetch the email and parse its content
            status, msg_data = mail.fetch(mail_id, "(RFC822)")
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])
                    if msg.is_multipart():
                        for part in msg.walk():
                            content_type = part.get_content_type()
                            body = part.get_payload(decode=True).decode()

                            if content_type == "text/html":  # Check HTML content
                                # Extract the hyperlink from the HTML body
                                soup = BeautifulSoup(body, "html.parser")
                                link = soup.find("a", string="Click here")  # Find hyperlink by text
                                
                                if link and link['href']:
                                    file_url = link['href']
                                    download_file(file_url)
                                    
        mail.logout()
    except Exception as e:
        print(f"Error: {e}")

def download_file(url):
    try:
        response = requests.get(url)
        filename = url.split("/")[-1]  # Extract the file name from the URL
        file_path = os.path.join(SAVE_FOLDER, filename)
        
        with open(file_path, "wb") as file:
            file.write(response.content)
        print(f"Downloaded: {file_path}")
    except Exception as e:
        print(f"Failed to download file: {e}")

# Call the main function
download_attachment_from_email()




import requests
import json

# Tableau server credentials
TABLEAU_SERVER_URL = "https://your-tableau-server-url"
SITE_ID = "your-site-id"  # Default site ID is an empty string: ""
USERNAME = "your-username"
PASSWORD = "your-password"

# Dashboard details
VIEW_CONTENT_URL = "views/workbook_name/dashboard_name"

# Function to sign in to Tableau and get an authentication token
def tableau_sign_in():
    url = f"{TABLEAU_SERVER_URL}/api/3.15/auth/signin"
    headers = {"Content-Type": "application/json"}
    payload = {
        "credentials": {
            "name": USERNAME,
            "password": PASSWORD,
            "site": {"contentUrl": SITE_ID}
        }
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        raise Exception(f"Failed to sign in: {response.text}")

    auth_token = response.json()["credentials"]["token"]
    site_id = response.json()["credentials"]["site"]["id"]
    return auth_token, site_id

# Function to download the dashboard as a PDF
def download_dashboard_pdf(auth_token, site_id, filter_params=None):
    url = f"{TABLEAU_SERVER_URL}/api/3.15/sites/{site_id}/views/{VIEW_CONTENT_URL}/pdf"
    headers = {"X-Tableau-Auth": auth_token}

    # Add filter parameters if provided
    if filter_params:
        url += "?" + "&".join([f"vf_{k}={v}" for k, v in filter_params.items()])

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception(f"Failed to download PDF: {response.text}")

    # Save the PDF file
    with open("dashboard.pdf", "wb") as file:
        file.write(response.content)
    print("Dashboard PDF downloaded successfully!")

# Main script
if __name__ == "__main__":
    try:
        # Authenticate and get token
        token, site_id = tableau_sign_in()

        # Define filters to apply (optional)
        filters = {
            "Region": "Asia",
            "Year": "2024"
        }

        # Download the filtered dashboard as a PDF
        download_dashboard_pdf(token, site_id, filter_params=filters)
    except Exception as e:
        print(f"Error: {e}")





