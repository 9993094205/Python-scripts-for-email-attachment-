import imaplib
import email
import os
from email.header import decode_header

# Function to create folder if it doesn't exist
def create_folder(folder_path):
    if not os.path.isdir(folder_path):
        os.makedirs(folder_path)

# Function to clean and create safe filename
def clean_filename(filename):
    return "".join(c if c.isalnum() else "_" for c in filename)

# Function to save attachments with new name
def save_attachments(msg, folder_path, new_name):
    for part in msg.walk():
        if part.get_content_maintype() == 'multipart':
            continue
        if part.get('Content-Disposition') is None:
            continue
        filename = part.get_filename()
        if filename:
            # Decode filename if necessary
            filename = decode_header(filename)[0][0]
            if isinstance(filename, bytes):
                filename = filename.decode()
            filename = clean_filename(filename)

            # Save the file with new name
            new_filepath = os.path.join(folder_path, new_name + os.path.splitext(filename)[1])
            with open(new_filepath, 'wb') as f:
                f.write(part.get_payload(decode=True))
            print(f"Attachment saved as: {new_filepath}")

# Connect to your email account
def download_attachments(username, password, folder_path, new_name):
    # Create folder if it doesn't exist
    create_folder(folder_path)

    # Connect to the email server
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(username, password)

    # Select the mailbox you want to check
    mail.select("inbox")

    # Search for all emails with attachments
    status, messages = mail.search(None, '(HASATTACHMENT)')

    # Fetch emails and save attachments
    for num in messages[0].split():
        status, msg_data = mail.fetch(num, '(RFC822)')
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                save_attachments(msg, folder_path, new_name)

    # Logout from the email account
    mail.logout()

# Example usage
username = "your_email@gmail.com"
password = "your_password"
folder_path = "/path/to/save/attachments"  # Replace with your desired folder
new_name = "new_attachment_name"           # Provide the new name for the attachment

download_attachments(username, password, folder_path, new_name)

new code for testing

import os
import re
import win32com.client

def download_attachments(save_folder: str):
    # Connect to Outlook
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 represents the inbox folder

    # Define regex pattern for subject line (File_DD/MM/YYYY)
    subject_pattern = r"^File_\d{2}/\d{2}/\d{4}$"

    # Search for today's email
    messages = inbox.Items
    message = None
    for msg in messages:
        if re.match(subject_pattern, msg.Subject):
            message = msg
            break

    # Process attachments if email with the subject is found
    if message is not None and message.Attachments.Count >= 2:
        # Ensure save folder exists
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Save and rename attachments
        attachment_names = ["File 1.pdf", "File 2.pdf"]  # Desired file names
        for i, attachment in enumerate(message.Attachments[:2]):  # Process the first two attachments
            file_path = os.path.join(save_folder, attachment_names[i])
            attachment.SaveAsFile(file_path)
            print(f"Attachment saved as: {file_path}")
    else:
        print("Email with specified subject not found or less than 2 attachments available.")

# Usage
save_folder = r"C:\XYZ"
download_attachments(save_folder)









import os
import re
import win32com.client
from datetime import datetime

def save_email(save_folder: str):
    # Connect to Outlook
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 represents the inbox folder

    # Defining the folder structure
    subfolder_name = "Ask Compass"
    sub_subfolder_name = "Forward Meeting Dashboard"

    try:
        # Access each level of nested folder
        subfolder = inbox.Folders[subfolder_name]
        target_folder = subfolder.Folders[sub_subfolder_name]
        print(f"Successfully accessed folder: {target_folder.Name}")
    except Exception as e:
        print(f"Error accessing folders: {e}")
        return

    # Define regex pattern for subject line (File_DD/MM/YYYY)
    today_date = datetime.now().strftime("%d %B")  # Format: DD month
    subject_pattern = rf"CalendarMeeting as of {today_date}"
    print(f"Expected Subject Pattern: {subject_pattern}")

    # Search for today's email
    messages = target_folder.Items
    message = None
    for msg in messages:
        print(f"Checking subject: {msg.Subject}")  # Print each subject for debugging
        if re.match(subject_pattern, msg.Subject):
            message = msg
            break

    # Save the email if it is found
    if message is not None:
        print(f"Email found with subject: {message.Subject}")

        # Ensure save folder exists
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Construct file path and save as .msg
        file_path = os.path.join(save_folder, f"{message.Subject}.msg")
        try:
            message.SaveAs(file_path)
            print(f"Email saved as: {file_path}")
        except Exception as e:
            print(f"Error saving email: {e}")
    else:
        print("Email with specified subject not found or does not meet criteria.")
        print("Debug Information:")
        print(f"Target Folder: {target_folder}")
        print(f"Expected Subject Pattern: {subject_pattern}")

# Usage
save_folder = "C:/save files folder"  # Update this path as needed
save_email(save_folder)



